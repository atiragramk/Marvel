{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearch/avengers.gif","components/charSearch/charSearch.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelServices.js","hooks/http.hook.js"],"names":["View","character","name","description","thumbnail","homepage","wiki","styles","objectFit","className","src","style","alt","slice","href","target","RandomChar","useState","setCharacter","useMarvelServices","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charactersData","setCharactersData","loadingMore","setLoadingMore","offset","setOffset","charEnded","setCharEnded","getAllCharacters","updateChars","onCharsLoaded","charactersDataMore","ended","length","initial","myRefs","useRef","items","arr","characters","map","i","CSSTransition","timeout","classNames","ref","el","current","tabIndex","index","getId","forEach","item","classList","remove","add","focus","TransitionGroup","component","renderItems","disabled","Skeleton","CharInfo","charId","skeleton","comics","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","CharSearch","getCharacterByName","formik","useFormik","initialValues","validationSchema","Yup","required","onSubmit","results","to","handleSubmit","placeholder","type","value","values","onChange","handleChange","onBlur","handleBlur","errors","touched","avengers","MainPage","selectedId","setSelectedId","Helmet","decoration","margin","background","display","maxHeight","Error","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","message","useHttp","_apiBase","_apiKey","a","res","_transformData","getComics","_transformComics","getComic","char","path","extension","urls","comicsCount","available","comic","price","prices","title","descr","lang","textObjects","language","pages","pageCount"],"mappings":"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","file":"static/js/6.d49a726c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useEffect, useState} from 'react'\nimport useMarvelServices from '../../services/MarvelServices';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\n\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [character, setCharacter] = useState({})\n    \n    const {loading, error, getCharacter, clearError} = useMarvelServices();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n\n    const onCharLoaded = (character) => {\n        setCharacter(character);\n    }\n    \n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View character={character}/> : null\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar}className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({character}) => {\n\n    const {name, description, thumbnail, homepage, wiki} = character\n    const noDescr = 'There is no description about this character'\n    const imgNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n    let styles = {}\n    if (thumbnail === imgNotFound) {\n        styles = {objectFit: 'contain'}\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n        <img src={thumbnail} style={styles} alt=\"Random character\" className=\"randomchar__img\"/>\n        <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">\n                {description ? `${description.slice(0, 190)}...` : noDescr}\n            </p>\n            <div className=\"randomchar__btns\">\n                <a href={homepage} className=\"button button__main\" target=\"blank\">\n                    <div className=\"inner\">homepage</div>\n                </a>\n                <a href={wiki} className=\"button button__secondary\" target=\"blank\">\n                    <div className=\"inner\">Wiki</div>\n                </a>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default RandomChar;","import React, { useEffect, useRef, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport useMarvelServices from '../../services/MarvelServices';\nimport PropTypes from 'prop-types';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './charList.scss';\n\n\n\nconst CharList = (props) => {\n\n    const [charactersData, setCharactersData] = useState([]);\n    const [loadingMore, setLoadingMore] = useState(false);\n    const [offset, setOffset] = useState(650);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const {loading, error, getAllCharacters} =  useMarvelServices();\n\n    useEffect(() => {\n        updateChars(offset, true);\n    }, [])\n\n    const onCharsLoaded = (charactersDataMore) => {\n        let ended = false;\n        if (charactersDataMore.length < 9) {\n            ended = true;\n        }\n        setCharactersData(charactersData => [...charactersData, ...charactersDataMore]);\n        setLoadingMore(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended)\n    }\n\n    const updateChars = (offset, initial) => {\n        initial ? setLoadingMore(false) : setLoadingMore(true);\n        getAllCharacters(offset)\n            .then(onCharsLoaded);\n    }\n\n\n    const myRefs = useRef([])\n \n\n    const focusOnItem = (index) => {\n    \n        myRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        myRefs.current[index].classList.add('char__item_selected');\n        myRefs.current[index].focus();\n    }\n\n\n    function renderItems (arr) {\n      \n        \n        const characters = arr.map(({thumbnail, name, id}, i) => {\n            const imgNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n            let styles = {}\n            if (thumbnail === imgNotFound) {\n                styles = {objectFit: 'contain'}\n            }\n\n            return (\n                    <CSSTransition key={id} timeout={300} classNames=\"char__item\">\n                        <li \n                            ref={el => myRefs.current[i] = el} \n                            className=\"char__item\"\n                            tabIndex={0} \n                            \n                            onClick={() => {\n                                    props.getId(id);\n                                    focusOnItem(i)}}\n                            >\n                                <img style={styles} src={thumbnail} alt=\"abyss\"/>\n                                <div className=\"char__name\">{name}</div>\n                        </li>\n\n                    </CSSTransition>\n\n                \n            )\n        })\n\n        return (\n\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {characters}\n                </TransitionGroup>\n\n            </ul>\n        )\n    }    \n        \n    const items = renderItems(charactersData)\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !loadingMore ? <Spinner/> : null;\n\n        \n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n            style={{'display': charEnded ? 'none' : 'block'}}\n            disabled={loadingMore}\n            onClick={() => updateChars(offset)} \n            className=\"button button__main button__long\">\n                <div className=\"inner\">load more</div> \n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    getId: PropTypes.func.isRequired\n\n}\n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component, useEffect, useState } from 'react';\nimport useMarvelServices from '../../services/MarvelServices';\nimport PropTypes from 'prop-types';\n\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\nimport { Fragment } from 'react';\n\n\nconst CharInfo = (props) => {\n\n    const [character, setCharacter] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelServices();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props\n        if (!charId) {\n          return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded);\n    }\n\n\n    const onCharLoaded = (character) => {\n        setCharacter(character);\n    }\n\n\n        const skeleton = character || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !character) ? <View character={character}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            \n        </div>\n        )\n   \n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;\n\nconst View = ({character}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = character\n    const imgNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n    let styles = {}\n    if (thumbnail === imgNotFound) {\n        styles = {objectFit: 'contain'}\n    }\n    const noDescr = 'There is no description about this character'\n\n\n    return (\n        <Fragment>\n            <div className=\"char__basics\">\n                <img style={styles} src={thumbnail} alt=\"abyss\"/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\" target=\"blank\">\n                            <div className=\"inner\">Homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\" target=\"blank\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description ? description : noDescr}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n\n\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                               <a href=\"/\" target=\"blank\">{item.name}</a>\n                            </li>\n                        )\n                    })\n                }\n                \n            </ul>\n        </Fragment>\n            \n        \n    )\n}\n\n","import {Component} from 'react'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error)\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n\n\n\n}\n\nexport default ErrorBoundary;\n\n","export default __webpack_public_path__ + \"static/media/avengers.73c37e0d.gif\";","import { useState } from 'react';\nimport { useFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport useMarvelServices from '../../services/MarvelServices';\n\nimport avengers from './avengers.gif'\nimport './charSearch.scss'\n\n\nconst CharSearch = () => {\n\n        const [character, setCharacter] = useState(null);\n        const {getCharacterByName, clearError} = useMarvelServices();\n\n        const onCharLoaded = (character) => {\n            setCharacter(character);\n        }\n\n        const formik = useFormik({\n        initialValues: {\n            name: ''\n        },\n        validationSchema: Yup.object({\n            name: Yup.string()\n                    .required('This field is required'),\n        }),\n        onSubmit: ({name}) => {\n            clearError()\n            getCharacterByName(name)\n            .then(onCharLoaded)\n        }\n    })\n    const results = !character ? null : character.length > 0?\n        <div className=\"search__success\"> \n        <h3 className=\"success\">{`There is! Visit ${character[0].name} page?`}</h3>\n            <Link to={`/character/${character[0].id}`} className=\"button button__secondary\">\n                <div className=\"inner\">to page</div>\n            </Link>\n        </div> : \n        <h3 className=\"error\">The character was not found. Check the name and try again</h3>\n\n\n    return (\n        <form className=\"wrapper\" onSubmit={formik.handleSubmit}>\n            <div className=\"wrapper__form\">\n                <h2>Or find a character by name:</h2>\n                <div className=\"wrapper__content\">\n                    <input\n                        placeholder=\"Enter a name\"\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"text\"\n                        value={formik.values.name}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}/>\n                    <button className=\"button button__main\">\n                            <div className=\"inner\">Find</div>\n                    </button>\n                    \n                </div>\n                {formik.errors.name && formik.touched.name ? <h4 className=\"error\">{formik.errors.name}</h4> : null}\n                {results}\n            </div>\n            <div className=\"form-static\">\n                <img src={avengers} alt=\"avengers\" />\n            </div>\n\n        </form>\n        \n    )\n}\n\nexport default CharSearch","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport {Helmet} from \"react-helmet\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport CharSearch from \"../charSearch/charSearch\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedId, setSelectedId] = useState(null);\n\n    const getId = (id) => {\n        setSelectedId(id)\n    }\n\n\n\n    return (\n        <>\n\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                    />\n                <title>Marvel information portal</title>\n\n            </Helmet>\n\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <CharSearch/>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList getId={getId}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <CharInfo charId={selectedId}/>\n                </ErrorBoundary>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import Error from './error.gif'\n\nconst ErrorMessage = (props) => {\n    return (\n        // <img src={process.env.PUBLIC_URL + '/Error.gif'} alt=\"\" /> //редко используется\n        <img \n        style={{margin: '0 auto', background: 'none', display: 'block', maxHeight: '260px'}} \n        src={Error} alt=\"\" />\n\n    )\n}\n\nexport default ErrorMessage","import { useHttp } from \"../hooks/http.hook\";\n\n\n\nconst  useMarvelServices  = () => {\n \n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    // _apiKey = 'apikey=d3355dee865c20d85e3e61765ea2d752'\n    const _apiKey = 'apikey=d49d3fc6fdb7197b16ad7a483365dd89'\n    const _offset = 650 \n\n    \n\n    const getAllCharacters = async(offset = _offset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformData)  \n    }\n    \n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformData(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformData);\n    }\n\n    const getComics = async (offset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformData = (char) => {\n        return {\n            name: char.name,\n            description:char.description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            id: char.id,\n            comics: char.comics.items,\n            comicsCount: char.comics.available ? char.comics.available : 'No comics available'\n        }\n    }\n\n    \n    const _transformComics = (comic) => {\n        return {\n            price: comic.prices[0].price ? `${comic.prices[0].price} $` : 'Not available',\n            title: comic.title,\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\n            homepage: comic.urls[0].url,\n            id: comic.id,\n            descr: comic.description || 'There is no description',\n            lang: comic.textObjects.language || 'en-us',\n            pages: comic.pageCount ? `${comic.pageCount} pages` : 'No information about the number of pages',\n        }\n    }\n\n\n    return {loading, error, getAllCharacters, getCharacter, clearError, getComics, getComic, getCharacterByName}\n}\n\nexport default useMarvelServices","import { useCallback, useState } from \"react\";\n\nexport const useHttp = () => {\n\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    \n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, []); \n\n    const clearError = useCallback(() => setError(null), [])\n\n    return {loading, request, error, clearError}\n\n}"],"sourceRoot":""}