{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelServices.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","props","style","grid","margin","background","display","gridColumn","src","Error","alt","useMarvelServices","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformData","getCharacter","id","getComics","_transformComics","getComic","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","comic","price","prices","title","descr","lang","textObjects","language","pages","pageCount","View","character","styles","objectFit","className","slice","href","target","RandomChar","setCharacter","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","charactersData","setCharactersData","loadingMore","setLoadingMore","setOffset","charEnded","setCharEnded","updateChars","onCharsLoaded","charactersDataMore","ended","length","initial","myRefs","useRef","arr","characters","i","ref","el","current","tabIndex","index","getId","forEach","item","classList","remove","add","focus","renderItems","disabled","Skeleton","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedId","setSelectedId","decoration"],"mappings":"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","file":"static/js/4.e863696e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import Error from './error.gif'\r\n\r\nconst ErrorMessage = (props) => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/Error.gif'} alt=\"\" /> //редко используется\r\n        <img \r\n        style={props.grid ? {margin: '0 auto', background: 'none', display: 'block', gridColumn: '2'} : {margin: '0 auto', background: 'none', display: 'block'}} \r\n        src={Error} alt=\"\" />\r\n\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\n\r\nconst  useMarvelServices  = () => {\r\n \r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    // _apiKey = 'apikey=d3355dee865c20d85e3e61765ea2d752'\r\n    const _apiKey = 'apikey=d49d3fc6fdb7197b16ad7a483365dd89'\r\n    const _offset = 650 \r\n\r\n    \r\n\r\n    const getAllCharacters = async(offset = _offset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformData)  \r\n    }\r\n    \r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformData(res.data.results[0]);\r\n    }\r\n\r\n    const getComics = async (offset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformData = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description:char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    \r\n    const _transformComics = (comic) => {\r\n        return {\r\n            price: comic.prices[0].price ? `${comic.prices[0].price} $` : 'Not available',\r\n            title: comic.title,\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            homepage: comic.urls[0].url,\r\n            id: comic.id,\r\n            descr: comic.description || 'There is no description',\r\n            lang: comic.textObjects.language || 'en-us',\r\n            pages: comic.pageCount ? `${comic.pageCount} pages` : 'No information about the number of pages',\r\n        }\r\n    }\r\n\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getComics, getComic}\r\n}\r\n\r\nexport default useMarvelServices","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    \r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []); \r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useEffect, useState} from 'react'\nimport useMarvelServices from '../../services/MarvelServices';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\n\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [character, setCharacter] = useState({})\n    \n    const {loading, error, getCharacter, clearError} = useMarvelServices();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n\n    const onCharLoaded = (character) => {\n        setCharacter(character);\n    }\n    \n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View character={character}/> : null\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar}className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({character}) => {\n\n    const {name, description, thumbnail, homepage, wiki} = character\n    const noDescr = 'There is no description about this character'\n    const imgNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n    let styles = {}\n    if (thumbnail === imgNotFound) {\n        styles = {objectFit: 'contain'}\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n        <img src={thumbnail} style={styles} alt=\"Random character\" className=\"randomchar__img\"/>\n        <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">\n                {description ? `${description.slice(0, 190)}...` : noDescr}\n            </p>\n            <div className=\"randomchar__btns\">\n                <a href={homepage} className=\"button button__main\" target=\"blank\">\n                    <div className=\"inner\">homepage</div>\n                </a>\n                <a href={wiki} className=\"button button__secondary\" target=\"blank\">\n                    <div className=\"inner\">Wiki</div>\n                </a>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default RandomChar;","import React, { useEffect, useRef, useState } from 'react';\nimport useMarvelServices from '../../services/MarvelServices';\nimport PropTypes from 'prop-types';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './charList.scss';\n\n\n\nconst CharList = (props) => {\n\n    const [charactersData, setCharactersData] = useState([]);\n    const [loadingMore, setLoadingMore] = useState(false);\n    const [offset, setOffset] = useState(650);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const {loading, error, getAllCharacters} =  useMarvelServices();\n\n    useEffect(() => {\n        updateChars(offset, true);\n    }, [])\n\n    const onCharsLoaded = (charactersDataMore) => {\n        let ended = false;\n        if (charactersDataMore.length < 9) {\n            ended = true;\n        }\n        setCharactersData(charactersData => [...charactersData, ...charactersDataMore]);\n        setLoadingMore(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended)\n    }\n\n    const updateChars = (offset, initial) => {\n        initial ? setLoadingMore(false) : setLoadingMore(true);\n        getAllCharacters(offset)\n            .then(onCharsLoaded);\n    }\n\n\n    const myRefs = useRef([])\n \n\n    const focusOnItem = (index) => {\n    \n        myRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        myRefs.current[index].classList.add('char__item_selected');\n        myRefs.current[index].focus();\n    }\n\n\n    function renderItems (arr) {\n        const characters = arr.map(({thumbnail, name, id}, i) => {\n            const imgNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n            let styles = {}\n            if (thumbnail === imgNotFound) {\n                styles = {objectFit: 'contain'}\n            }\n\n            return (\n                <li \n                ref={el => myRefs.current[i] = el} \n                className=\"char__item\"\n                tabIndex={0} \n                key={id} \n                onClick={() => {\n                        props.getId(id);\n                        focusOnItem(i)}}\n                >\n                    <img style={styles} src={thumbnail} alt=\"abyss\"/>\n                    <div className=\"char__name\">{name}</div>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                {characters}\n            </ul>\n        )\n    }    \n        \n    const items = renderItems(charactersData)\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !loadingMore ? <Spinner/> : null;\n\n        \n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n            style={{'display': charEnded ? 'none' : 'block'}}\n            disabled={loadingMore}\n            onClick={() => updateChars(offset)} \n            className=\"button button__main button__long\">\n                <div className=\"inner\">load more</div> \n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    getId: PropTypes.func.isRequired\n\n}\n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component, useEffect, useState } from 'react';\nimport useMarvelServices from '../../services/MarvelServices';\nimport PropTypes from 'prop-types';\n\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\nimport { Fragment } from 'react';\n\n\nconst CharInfo = (props) => {\n\n    const [character, setCharacter] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelServices();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props\n        if (!charId) {\n          return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded);\n    }\n\n\n    const onCharLoaded = (character) => {\n        setCharacter(character);\n    }\n\n\n        const skeleton = character || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !character) ? <View character={character}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            \n        </div>\n        )\n   \n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;\n\nconst View = ({character}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = character\n    const imgNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n    let styles = {}\n    if (thumbnail === imgNotFound) {\n        styles = {objectFit: 'contain'}\n    }\n    const noDescr = 'There is no description about this character'\n\n\n    return (\n        <Fragment>\n            <div className=\"char__basics\">\n                <img style={styles} src={thumbnail} alt=\"abyss\"/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\" target=\"blank\">\n                            <div className=\"inner\">Homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\" target=\"blank\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description ? description : noDescr}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n\n\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                               <a href=\"/\" target=\"blank\">{item.name}</a>\n                            </li>\n                        )\n                    })\n                }\n                \n            </ul>\n        </Fragment>\n            \n        \n    )\n}\n\n","import {Component} from 'react'\r\nimport ErrorMessage from '../errorMessage/ErrorMessage'\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedId, setSelectedId] = useState(null);\r\n\r\n    const getId = (id) => {\r\n        setSelectedId(id)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList getId={getId}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedId}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\nexport default MainPage;"],"sourceRoot":""}